//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 view_projection;// Offset:    0 Size:    64 [unused]
//   float4 light_direction;            // Offset:   64 Size:    16
//   float4 camera_position;            // Offset:   80 Size:    16
//   float lineSize;                    // Offset:   96 Size:     4 [unused]
//   float3 lineColor;                  // Offset:  100 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerState                      sampler      NA          NA             s0      1 
// textureMaps[0]                    texture  float4          2d             t0      1 
// textureMaps[1]                    texture  float4          2d             t1      1 
// ramp                              texture  float4          2d             t3      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// NORMAL                   0   xyzw        3     NONE   float   xyz 
// TANGENT                  0   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float       
// IS_OUTLINE               0   x           6     NONE    uint   x   
// SV_IsFrontFace           0   x           7    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyzw
dcl_input_ps constant v6.x
dcl_input_ps_sgv constant v7.x, is_front_face
dcl_output o0.xyzw
dcl_temps 9
//
// Initial variable locations:
//   v0.x <- input.vs.position.x; v0.y <- input.vs.position.y; v0.z <- input.vs.position.z; v0.w <- input.vs.position.w; 
//   v1.x <- input.vs.world_position.x; v1.y <- input.vs.world_position.y; v1.z <- input.vs.world_position.z; v1.w <- input.vs.world_position.w; 
//   v2.x <- input.vs.texcoord.x; v2.y <- input.vs.texcoord.y; 
//   v3.x <- input.vs.world_normal.x; v3.y <- input.vs.world_normal.y; v3.z <- input.vs.world_normal.z; v3.w <- input.vs.world_normal.w; 
//   v4.x <- input.vs.world_tangent.x; v4.y <- input.vs.world_tangent.y; v4.z <- input.vs.world_tangent.z; v4.w <- input.vs.world_tangent.w; 
//   v5.x <- input.vs.color.x; v5.y <- input.vs.color.y; v5.z <- input.vs.color.z; v5.w <- input.vs.color.w; 
//   v6.x <- input.is_outline; 
//   v7.x <- is_front_face; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 4 "C:\Users\2230160\Desktop\d3dxgp-conponet\HLSL\physical_based_rendering_functions.hlsli"
mov r0.x, l(3.141593)  // r0.x <- PI

#line 7
mov r0.y, l(2.200000)  // r0.y <- GammaFactor

#line 42 "C:\Users\2230160\Desktop\d3dxgp-conponet\HLSL\SkinnedMeshPS.hlsl"
if_nz v6.x

#line 44
  itof o0.w, l(1)
  mov o0.xyz, cb1[6].yzwy
  ret 

#line 45
endif 

#line 47
mov r1.xyz, v1.xyzx  // r1.x <- pin.world_position.x; r1.y <- pin.world_position.y; r1.z <- pin.world_position.z
mov r2.xyz, v3.xyzx  // r2.x <- pin.world_normal.x; r2.y <- pin.world_normal.y; r2.z <- pin.world_normal.z
mov r3.xyzw, v4.wxyz  // r3.x <- pin.world_tangent.w; r3.y <- pin.world_tangent.x; r3.z <- pin.world_tangent.y; r3.w <- pin.world_tangent.z

#line 50
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t0.xyzw, s0  // r4.x <- color.x; r4.y <- color.y; r4.z <- color.z; r4.w <- color.w

#line 52
log r4.xyz, r4.xyzx
mul r0.yzw, r0.yyyy, r4.xxyz
exp r0.yzw, r0.yyzw  // r0.y <- color.x; r0.z <- color.y; r0.w <- color.z

#line 56
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z

#line 57
dp3 r1.w, r3.yzwy, r3.yzwy
rsq r1.w, r1.w
mul r3.yzw, r1.wwww, r3.yyzw  // r3.y <- T.x; r3.z <- T.y; r3.w <- T.z

#line 58
mov r3.x, r3.x  // r3.x <- sigma

#line 59
dp3 r1.w, r2.xyzx, r3.yzwy
mul r4.xyz, r1.wwww, r2.xyzx
mov r4.xyz, -r4.xyzx
add r3.yzw, r3.yyzw, r4.xxyz
dp3 r1.w, r3.yzwy, r3.yzwy
rsq r1.w, r1.w
mul r3.yzw, r1.wwww, r3.yyzw  // r3.y <- T.x; r3.z <- T.y; r3.w <- T.z

#line 60
mul r4.xyz, r2.yzxy, r3.wyzw
mul r5.xyz, r2.zxyz, r3.zwyz
mov r5.xyz, -r5.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r4.xyz, r3.xxxx, r4.xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- B.x; r4.y <- B.y; r4.z <- B.z

#line 63
if_z v7.x

#line 65
  mov r3.yzw, -r3.yyzw

#line 66
  mov r4.xyz, -r4.xyzx

#line 67
  mov r2.xyz, -r2.xyzx

#line 68
endif 

#line 71
sample_indexable(texture2d)(float,float,float,float) r5.xyz, v2.xyxx, t1.xyzw, s0
mov r5.xyz, r5.xyzx  // r5.x <- normal.x; r5.y <- normal.y; r5.z <- normal.z

#line 72
mul r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r5.xyz, r5.xyzx, r6.xyzx

#line 73
mul r3.xyz, r3.yzwy, r5.xxxx
mul r4.xyz, r4.xyzx, r5.yyyy
add r3.xyz, r3.xyzx, r4.xyzx
mul r2.xyz, r2.xyzx, r5.zzzz
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z

#line 75
mov r3.xyz, -cb1[4].xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // r3.x <- L.x; r3.y <- L.y; r3.z <- L.z

#line 77
mov r1.xyz, -r1.xyzx
add r1.xyz, r1.xyzx, cb1[5].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- V.x; r1.y <- V.y; r1.z <- V.z

#line 81
mov r1.w, l(1.000000)  // r1.w <- metalness

#line 84
mov r4.xyz, -r0.yzwy
add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r4.xyz, r1.wwww, r4.xyzx
add r4.xyz, r0.yzwy, r4.xyzx  // r4.x <- diffuse_reflectance.x; r4.y <- diffuse_reflectance.y; r4.z <- diffuse_reflectance.z

#line 87
mov r5.xyz, l(-0.040000,-0.040000,-0.040000,-0.000000)
add r5.xyz, r0.yzwy, r5.xyzx
mul r5.xyz, r1.wwww, r5.xyzx
add r5.xyz, r5.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)  // r5.x <- F0.x; r5.y <- F0.y; r5.z <- F0.z

#line 89
mov r1.w, l(0)  // r1.w <- roughness

#line 92
mov r6.xyz, l(0.500000,0.500000,0.500000,0)  // r6.x <- LC.x; r6.y <- LC.y; r6.z <- LC.z

#line 93
nop 
mov r4.xyz, r4.xyzx
mov r5.xyz, r5.xyzx
mov r2.xyz, r2.xyzx
mov r1.xyz, r1.xyzx
mov r3.xyz, r3.xyzx
mov r6.xyz, r6.xyzx
mov r1.w, r1.w

#line 275 "C:\Users\2230160\Desktop\d3dxgp-conponet\HLSL\physical_based_rendering_functions.hlsli"
mov r2.xyz, r2.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z

#line 276
mov r7.xyz, -r3.xyzx  // r7.x <- L.x; r7.y <- L.y; r7.z <- L.z

#line 277
mov r1.xyz, -r1.xyzx  // r1.x <- V.x; r1.y <- V.y; r1.z <- V.z

#line 278
add r8.xyz, r1.xyzx, r7.xyzx
dp3 r2.w, r8.xyzx, r8.xyzx
rsq r2.w, r2.w
mul r8.xyz, r2.wwww, r8.xyzx  // r8.x <- H.x; r8.y <- H.y; r8.z <- H.z

#line 280
dp3 r1.x, r2.xyzx, r1.xyzx
max r1.x, r1.x, l(0.000100)  // r1.x <- NdotV

#line 281
dp3 r1.y, r2.xyzx, r7.xyzx
max r1.y, r1.y, l(0.000100)  // r1.y <- NdotL

#line 282
dp3 r1.z, r2.xyzx, r8.xyzx
max r1.z, r1.z, l(0.000100)  // r1.z <- NdotH

#line 283
dp3 r2.w, r2.xyzx, r8.xyzx
max r2.w, r2.w, l(0.000100)  // r2.w <- VdotH

#line 285
mul r6.xyz, r1.yyyy, r6.xyzx  // r6.x <- irradiance.x; r6.y <- irradiance.y; r6.z <- irradiance.z

#line 288
nop 
mov r2.w, r2.w
mov r5.xyz, r5.xyzx
mov r4.xyz, r4.xyzx

#line 27
nop 
mov r5.xyz, r5.xyzx
mov r2.w, r2.w

#line 16
mov r7.xyz, -r5.xyzx
add r7.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r3.w, -r2.w
add r3.w, r3.w, l(1.000000)
max r3.w, r3.w, l(0.000000)
min r3.w, r3.w, l(1.000000)
mov r5.w, l(1.000000)
mul r5.w, r3.w, r5.w
mul r3.w, r3.w, r3.w
mul r3.w, r3.w, r3.w
mul r3.w, r3.w, r5.w
mul r7.xyz, r3.wwww, r7.xyzx
add r7.xyz, r5.xyzx, r7.xyzx  // r7.x <- <CalcFresnel return value>.x; r7.y <- <CalcFresnel return value>.y; r7.z <- <CalcFresnel return value>.z

#line 27
mov r7.xyz, -r7.xyzx
add r7.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
div r4.xyz, r4.xyzx, r0.xxxx
mul r4.xyz, r4.xyzx, r7.xyzx  // r4.x <- <DiffuseBRDF return value>.x; r4.y <- <DiffuseBRDF return value>.y; r4.z <- <DiffuseBRDF return value>.z

#line 288
mul r4.xyz, r6.xyzx, r4.xyzx  // r4.x <- out_diffuse.x; r4.y <- out_diffuse.y; r4.z <- out_diffuse.z

#line 293
nop 
mov r1.x, r1.x
mov r1.y, r1.y
mov r1.z, r1.z
mov r2.w, r2.w
mov r5.xyz, r5.xyzx
mov r1.w, r1.w

#line 81
nop 
mov r1.z, r1.z
mov r1.w, r1.w

#line 37
mul r3.w, r1.w, r1.w  // r3.w <- a

#line 38
mul r1.z, r1.z, r1.z
mov r5.w, l(-1.000000)
add r5.w, r3.w, r5.w
mul r1.z, r1.z, r5.w
add r1.z, r1.z, l(1.000000)  // r1.z <- b

#line 39
mul r0.x, r0.x, r1.z
mul r0.x, r1.z, r0.x
div r0.x, r3.w, r0.x  // r0.x <- <CalcNormalDistributionFunction return value>

#line 81
mov r0.x, r0.x  // r0.x <- D

#line 83
nop 
mov r1.y, r1.y
mov r1.x, r1.x
mov r1.w, r1.w

#line 50
mul r1.z, r1.w, l(0.500000)  // r1.z <- r

#line 51
mov r1.w, -r1.z
add r1.w, r1.w, l(1.000000)
mul r1.w, r1.w, r1.y
add r1.w, r1.z, r1.w
div r1.w, r1.y, r1.w  // r1.w <- shadowing

#line 52
mov r3.w, -r1.z
add r3.w, r3.w, l(1.000000)
mul r3.w, r1.x, r3.w
add r1.z, r1.z, r3.w
div r1.z, r1.x, r1.z  // r1.z <- masking

#line 53
mul r1.z, r1.z, r1.w  // r1.z <- <CalcGeometryFunction return value>

#line 83
mov r1.z, r1.z  // r1.z <- G

#line 85
nop 
mov r5.xyz, r5.xyzx
mov r2.w, r2.w

#line 16
mov r7.xyz, -r5.xyzx
add r7.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r1.w, -r2.w
add r1.w, r1.w, l(1.000000)
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, l(1.000000)
mov r2.w, l(1.000000)
mul r2.w, r1.w, r2.w
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.w
mul r7.xyz, r1.wwww, r7.xyzx
add r5.xyz, r5.xyzx, r7.xyzx  // r5.x <- <CalcFresnel return value>.x; r5.y <- <CalcFresnel return value>.y; r5.z <- <CalcFresnel return value>.z

#line 85
mov r5.xyz, r5.xyzx  // r5.x <- F.x; r5.y <- F.y; r5.z <- F.z

#line 87
mul r0.x, r0.x, r1.z
mul r5.xyz, r5.xyzx, r0.xxxx
mul r0.x, r1.x, r1.y
mul r0.x, r0.x, l(4.000000)
div r1.xyz, r5.xyzx, r0.xxxx  // r1.x <- <SpecularBRDF return value>.x; r1.y <- <SpecularBRDF return value>.y; r1.z <- <SpecularBRDF return value>.z

#line 293
mul r1.xyz, r6.xyzx, r1.xyzx  // r1.x <- out_specular.x; r1.y <- out_specular.y; r1.z <- out_specular.z

#line 93 "C:\Users\2230160\Desktop\d3dxgp-conponet\HLSL\SkinnedMeshPS.hlsl"
mov r4.xyz, r4.xyzx  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
mov r1.xyz, r1.xyzx  // r1.x <- specular.x; r1.y <- specular.y; r1.z <- specular.z

#line 101
mul r0.xyz, r0.yzwy, l(0.700000, 0.700000, 0.700000, 0.000000)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z

#line 102
nop 
nop 
nop 
mov r2.xyz, r2.xyzx
mov r3.xyz, r3.xyzx
add r0.xyz, r0.xyzx, r4.xyzx

#line 18
mov r3.xyz, -r3.xyzx
dp3 r0.w, r2.xyzx, r3.xyzx
mul r0.w, r0.w, l(0.500000)
add r0.w, r0.w, l(0.500000)
max r0.w, r0.w, l(0.000000)
min r2.x, r0.w, l(1.000000)  // r2.x <- D

#line 19
mov r2.y, l(0.500000)
sample_indexable(texture2d)(float,float,float,float) r0.w, r2.xyxx, t3.yzwx, s0
mov r0.w, r0.w  // r0.w <- Ramp

#line 20
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <CalcRempDiffuse return value>.x; r0.y <- <CalcRempDiffuse return value>.y; r0.z <- <CalcRempDiffuse return value>.z

#line 102
mov r0.xyz, r0.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z

#line 105
add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- ReturnColor.x; r0.y <- ReturnColor.y; r0.z <- ReturnColor.z

#line 109
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp r0.xyz, r0.xyzx  // r0.x <- ReturnColor.x; r0.y <- ReturnColor.y; r0.z <- ReturnColor.z

#line 111
mov o0.xyz, r0.xyzx  // o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z
mov o0.w, r4.w  // o0.w <- <main return value>.w
ret 
// Approximately 210 instruction slots used
