//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBColorGrading
// {
//
//   float hueShift;                    // Offset:    0 Size:     4
//   float saturation;                  // Offset:    4 Size:     4
//   float brightness;                  // Offset:    8 Size:     4
//   float dummy;                       // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler0                          sampler      NA          NA             s0      1 
// texture0                          texture  float4          2d             t0      1 
// CBColorGrading                    cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB2[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 126 "C:\Users\2230160\Desktop\d3dxgp-conponet\HLSL\ColorGrandingPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 128
nop 
mov r0.xyz, r0.xyzx

#line 21
itof r1.x, l(0)  // r1.x <- hsv.x

#line 23
max r1.w, r0.z, r0.y
max r1.z, r0.x, r1.w  // r1.z <- Vmax

#line 24
min r1.w, r0.z, r0.y
min r1.w, r0.x, r1.w  // r1.w <- Vmin

#line 27
mov r1.w, -r1.w
add r1.w, r1.w, r1.z  // r1.w <- delta

#line 30
mov r1.z, r1.z  // r1.z <- hsv.z

#line 33
div r2.x, r1.w, r1.z
itof r2.y, l(0)
ge r2.y, r1.z, r2.y
movc r2.y, r2.y, l(1.000000), l(0)
mul r1.y, r2.y, r2.x  // r1.y <- hsv.y

#line 36
lt r2.x, l(0.000000), r1.y
if_nz r2.x

#line 38
  eq r2.x, r0.x, r1.z
  if_nz r2.x

#line 40
    itof r2.x, l(60)
    mov r2.y, -r0.z
    add r2.y, r0.y, r2.y
    mul r2.x, r2.y, r2.x
    div r1.x, r2.x, r1.w

#line 41
  else 

#line 42
    eq r2.x, r0.y, r1.z
    if_nz r2.x

#line 44
      itof r2.x, l(60)
      mov r2.y, -r0.x
      add r2.y, r0.z, r2.y
      mul r2.x, r2.y, r2.x
      div r2.x, r2.x, r1.w
      itof r2.y, l(120)
      add r1.x, r2.y, r2.x

#line 45
    else 

#line 46
      eq r0.z, r0.z, r1.z
      if_nz r0.z

#line 48
        itof r0.z, l(60)
        mov r0.y, -r0.y
        add r0.x, r0.y, r0.x
        mul r0.x, r0.x, r0.z
        div r0.x, r0.x, r1.w
        itof r0.y, l(240)
        add r1.x, r0.y, r0.x

#line 49
      endif 
    endif 
  endif 

#line 51
  itof r0.x, l(0)
  lt r0.x, r1.x, r0.x
  if_nz r0.x

#line 53
    itof r0.x, l(360)
    add r1.x, r0.x, r1.x

#line 54
  endif 

#line 55
endif 

#line 56
mov r1.x, r1.x  // r1.x <- <RGB2HSV return value>.x
mov r1.y, r1.y  // r1.y <- <RGB2HSV return value>.y
mov r1.z, r1.z  // r1.z <- <RGB2HSV return value>.z

#line 128
mov r1.xyz, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 131
add r0.x, r1.x, cb2[0].x  // r0.x <- color.x

#line 134
mul r0.y, r1.y, cb2[0].y  // r0.y <- color.y

#line 137
mul r0.z, r1.z, cb2[0].z  // r0.z <- color.z

#line 140
nop 
mov r0.x, r0.x
mov r0.y, r0.y
mov r0.z, r0.z

#line 65
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- rgb.x; r1.y <- rgb.y; r1.z <- rgb.z

#line 66
itof r1.w, l(0)
eq r1.w, r0.y, r1.w
if_nz r1.w

#line 69
  mov r1.z, r0.z
  mov r1.y, r1.z
  mov r1.x, r1.y

#line 70
else 

#line 74
  mov r0.z, r0.z  // r0.z <- Vmax

#line 76
  itof r1.w, l(360)
  mul r2.x, r0.x, r1.w
  mov r2.y, -r2.x
  ge r2.x, r2.x, r2.y
  mov r2.y, -r1.w
  movc r1.w, r2.x, r1.w, r2.y
  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
  mul r0.x, r0.x, r2.x
  frc r0.x, r0.x
  mul r0.x, r0.x, r1.w  // r0.x <- hsv.x

#line 77
  itof r1.w, l(60)
  div r1.w, r0.x, r1.w
  ftoi r1.w, r1.w
  itof r1.w, r1.w  // r1.w <- Huei

#line 78
  itof r2.x, l(60)
  div r0.x, r0.x, r2.x
  mov r2.x, -r1.w
  add r0.x, r0.x, r2.x  // r0.x <- Huef

#line 79
  mov r2.x, -r0.y
  add r2.x, r2.x, l(1.000000)
  mul r2.x, r0.z, r2.x  // r2.x <- p

#line 80
  mul r2.y, r0.x, r0.y
  mov r2.y, -r2.y
  add r2.y, r2.y, l(1.000000)
  mul r2.y, r0.z, r2.y  // r2.y <- q

#line 81
  itof r2.z, l(1)
  mov r0.x, -r0.x
  add r0.x, r0.x, r2.z
  mul r0.x, r0.x, r0.y
  mov r0.x, -r0.x
  add r0.x, r0.x, l(1.000000)
  mul r0.x, r0.x, r0.z  // r0.x <- t

#line 83
  itof r0.y, l(0)
  eq r0.y, r0.y, r1.w
  if_nz r0.y

#line 85
    mov r1.x, r0.z

#line 86
    mov r1.y, r0.x

#line 87
    mov r1.z, r2.x

#line 88
  else 

#line 89
    itof r0.y, l(1)
    eq r0.y, r0.y, r1.w
    if_nz r0.y

#line 91
      mov r1.x, r2.y

#line 92
      mov r1.y, r0.z

#line 93
      mov r1.z, r2.x

#line 94
    else 

#line 95
      itof r0.y, l(2)
      eq r0.y, r0.y, r1.w
      if_nz r0.y

#line 97
        mov r1.x, r2.x

#line 98
        mov r1.y, r0.z

#line 99
        mov r1.z, r0.x

#line 100
      else 

#line 101
        itof r0.y, l(3)
        eq r0.y, r0.y, r1.w
        if_nz r0.y

#line 103
          mov r1.x, r2.x

#line 104
          mov r1.y, r2.y

#line 105
          mov r1.z, r0.z

#line 106
        else 

#line 107
          itof r0.y, l(4)
          eq r0.y, r0.y, r1.w
          if_nz r0.y

#line 109
            mov r1.x, r0.x

#line 110
            mov r1.y, r2.x

#line 111
            mov r1.z, r0.z

#line 112
          else 

#line 113
            itof r0.x, l(5)
            eq r0.x, r0.x, r1.w
            if_nz r0.x

#line 115
              mov r1.x, r0.z

#line 116
              mov r1.y, r2.x

#line 117
              mov r1.z, r2.y

#line 118
            endif 
          endif 
        endif 
      endif 
    endif 
  endif 

#line 119
endif 

#line 120
mov r1.xyz, r1.xyzx  // r1.x <- <HSV2RGB return value>.x; r1.y <- <HSV2RGB return value>.y; r1.z <- <HSV2RGB return value>.z

#line 140
mov r1.xyz, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 142
mov o0.xyz, r1.xyzx
mov o0.w, r0.w
ret 
// Approximately 160 instruction slots used
