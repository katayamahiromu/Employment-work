//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 view_projection;// Offset:    0 Size:    64
//   float4 light_direction;            // Offset:   64 Size:    16 [unused]
//   float4 camera_position;            // Offset:   80 Size:    16 [unused]
//   float lineSize;                    // Offset:   96 Size:     4
//   float3 lineColor;                  // Offset:  100 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// NORMAL                   0   xyzw        3     NONE   float   xyzw
// TANGENT                  0   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// NORMAL                   0   xyzw        3     NONE   float   xyzw
// TANGENT                  0   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   xyzw
// IS_OUTLINE               0   x           6     NONE    uint   x   
//
gs_4_0
dcl_constantbuffer CB1[7], immediateIndexed
dcl_input_siv v[3][0].xyzw, position
dcl_input v[3][1].xyzw
dcl_input v[3][2].xy
dcl_input v[3][3].xyzw
dcl_input v[3][4].xyzw
dcl_input v[3][5].xyzw
dcl_temps 7
dcl_inputprimitive triangle 
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.x
dcl_maxout 6
//
// Initial variable locations:
//   m0 <- output; 
//   v[0][0].x <- input[0].position.x; v[0][0].y <- input[0].position.y; v[0][0].z <- input[0].position.z; v[0][0].w <- input[0].position.w; 
//   v[0][1].x <- input[0].world_position.x; v[0][1].y <- input[0].world_position.y; v[0][1].z <- input[0].world_position.z; v[0][1].w <- input[0].world_position.w; 
//   v[0][2].x <- input[0].texcoord.x; v[0][2].y <- input[0].texcoord.y; 
//   v[0][3].x <- input[0].world_normal.x; v[0][3].y <- input[0].world_normal.y; v[0][3].z <- input[0].world_normal.z; v[0][3].w <- input[0].world_normal.w; 
//   v[0][4].x <- input[0].world_tangent.x; v[0][4].y <- input[0].world_tangent.y; v[0][4].z <- input[0].world_tangent.z; v[0][4].w <- input[0].world_tangent.w; 
//   v[0][5].x <- input[0].color.x; v[0][5].y <- input[0].color.y; v[0][5].z <- input[0].color.z; v[0][5].w <- input[0].color.w; 
//   v[1][0].x <- input[1].position.x; v[1][0].y <- input[1].position.y; v[1][0].z <- input[1].position.z; v[1][0].w <- input[1].position.w; 
//   v[1][1].x <- input[1].world_position.x; v[1][1].y <- input[1].world_position.y; v[1][1].z <- input[1].world_position.z; v[1][1].w <- input[1].world_position.w; 
//   v[1][2].x <- input[1].texcoord.x; v[1][2].y <- input[1].texcoord.y; 
//   v[1][3].x <- input[1].world_normal.x; v[1][3].y <- input[1].world_normal.y; v[1][3].z <- input[1].world_normal.z; v[1][3].w <- input[1].world_normal.w; 
//   v[1][4].x <- input[1].world_tangent.x; v[1][4].y <- input[1].world_tangent.y; v[1][4].z <- input[1].world_tangent.z; v[1][4].w <- input[1].world_tangent.w; 
//   v[1][5].x <- input[1].color.x; v[1][5].y <- input[1].color.y; v[1][5].z <- input[1].color.z; v[1][5].w <- input[1].color.w; 
//   v[2][0].x <- input[2].position.x; v[2][0].y <- input[2].position.y; v[2][0].z <- input[2].position.z; v[2][0].w <- input[2].position.w; 
//   v[2][1].x <- input[2].world_position.x; v[2][1].y <- input[2].world_position.y; v[2][1].z <- input[2].world_position.z; v[2][1].w <- input[2].world_position.w; 
//   v[2][2].x <- input[2].texcoord.x; v[2][2].y <- input[2].texcoord.y; 
//   v[2][3].x <- input[2].world_normal.x; v[2][3].y <- input[2].world_normal.y; v[2][3].z <- input[2].world_normal.z; v[2][3].w <- input[2].world_normal.w; 
//   v[2][4].x <- input[2].world_tangent.x; v[2][4].y <- input[2].world_tangent.y; v[2][4].z <- input[2].world_tangent.z; v[2][4].w <- input[2].world_tangent.w; 
//   v[2][5].x <- input[2].color.x; v[2][5].y <- input[2].color.y; v[2][5].z <- input[2].color.z; v[2][5].w <- input[2].color.w
//
#line 8 "C:\Users\2230160\Desktop\d3dxgp-conponet\HLSL\SkinnedMeshGS.hlsl"
mov r0.x, l(0)  // r0.x <- i
mov r0.y, r0.x  // r0.y <- i
loop 
  ilt r0.z, r0.y, l(3)
  breakc_z r0.z

#line 11
  mov r1.xyzw, v[r0.y + 0][0].xyzw  // r1.x <- element.vs.position.x; r1.y <- element.vs.position.y; r1.z <- element.vs.position.z; r1.w <- element.vs.position.w
  mov r2.xyzw, v[r0.y + 0][1].xyzw  // r2.x <- element.vs.world_position.x; r2.y <- element.vs.world_position.y; r2.z <- element.vs.world_position.z; r2.w <- element.vs.world_position.w
  mov r3.xyzw, v[r0.y + 0][3].xyzw  // r3.x <- element.vs.world_normal.x; r3.y <- element.vs.world_normal.y; r3.z <- element.vs.world_normal.z; r3.w <- element.vs.world_normal.w
  mov r4.xyzw, v[r0.y + 0][4].xyzw  // r4.x <- element.vs.world_tangent.x; r4.y <- element.vs.world_tangent.y; r4.z <- element.vs.world_tangent.z; r4.w <- element.vs.world_tangent.w
  mov r5.xyzw, v[r0.y + 0][5].xyzw  // r5.x <- element.vs.color.x; r5.y <- element.vs.color.y; r5.z <- element.vs.color.z; r5.w <- element.vs.color.w
  mov r0.zw, v[r0.y + 0][2].xxxy  // r0.z <- element.vs.texcoord.x; r0.w <- element.vs.texcoord.y

#line 12
  mov r6.x, l(0)  // r6.x <- element.is_outline

#line 13
  mov o0.xyzw, r1.xyzw
  mov o1.xyzw, r2.xyzw
  mov o2.xy, r0.zwzz
  mov o3.xyzw, r3.xyzw
  mov o4.xyzw, r4.xyzw
  mov o5.xyzw, r5.xyzw
  mov o6.x, r6.x
  emit 

#line 14
  iadd r0.y, r0.y, l(1)
endloop 

#line 15
cut 

#line 18
mov r0.x, l(2)  // r0.x <- i
mov r0.y, r0.x  // r0.y <- i
loop 
  ige r0.z, r0.y, l(0)
  breakc_z r0.z

#line 21
  mov r1.xyzw, v[r0.y + 0][3].xyzw  // r1.x <- element.vs.world_normal.x; r1.y <- element.vs.world_normal.y; r1.z <- element.vs.world_normal.z; r1.w <- element.vs.world_normal.w
  mov r2.xyzw, v[r0.y + 0][4].xyzw  // r2.x <- element.vs.world_tangent.x; r2.y <- element.vs.world_tangent.y; r2.z <- element.vs.world_tangent.z; r2.w <- element.vs.world_tangent.w
  mov r3.xyzw, v[r0.y + 0][5].xyzw  // r3.x <- element.vs.color.x; r3.y <- element.vs.color.y; r3.z <- element.vs.color.z; r3.w <- element.vs.color.w
  mov r0.zw, v[r0.y + 0][2].xxxy  // r0.z <- element.vs.texcoord.x; r0.w <- element.vs.texcoord.y

#line 22
  itof r4.x, l(1)  // r4.x <- element.vs.world_position.w

#line 23
  mov r4.y, r0.y
  mul r5.xyz, cb1[6].xxxx, v[r0.y + 0][3].xyzx
  add r4.yzw, r5.xxyz, v[r4.y + 0][1].xxyz  // r4.y <- element.vs.world_position.x; r4.z <- element.vs.world_position.y; r4.w <- element.vs.world_position.z

#line 24
  mul r5.xyzw, r4.yyyy, cb1[0].xyzw
  mul r6.xyzw, r4.zzzz, cb1[1].xyzw
  add r5.xyzw, r5.xyzw, r6.xyzw
  mul r6.xyzw, r4.wwww, cb1[2].xyzw
  add r5.xyzw, r5.xyzw, r6.xyzw
  mul r6.xyzw, r4.xxxx, cb1[3].xyzw
  add r5.xyzw, r5.xyzw, r6.xyzw  // r5.x <- element.vs.position.x; r5.y <- element.vs.position.y; r5.z <- element.vs.position.z; r5.w <- element.vs.position.w

#line 25
  mov r6.x, l(-1)  // r6.x <- element.is_outline

#line 27
  mov o0.xyzw, r5.xyzw
  mov o1.xyz, r4.yzwy
  mov o1.w, r4.x
  mov o2.xy, r0.zwzz
  mov o3.xyzw, r1.xyzw
  mov o4.xyzw, r2.xyzw
  mov o5.xyzw, r3.xyzw
  mov o6.x, r6.x
  emit 

#line 28
  iadd r0.y, r0.y, l(-1)
endloop 

#line 29
cut 

#line 31
ret 
// Approximately 57 instruction slots used
