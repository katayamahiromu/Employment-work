//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer RewindLine
// {
//
//   float time;                        // Offset:    0 Size:     4
//   float2 screenSize;                 // Offset:    4 Size:     8
//   float dummy;                       // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler0                          sampler      NA          NA             s0      1 
// texture0                          texture  float4          2d             t0      1 
// RewindLine                        cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB2[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 16 "C:\Users\2230160\Desktop\d3dxgp-conponet\HLSL\RewindLinePS.hlsl"
mov r0.xy, v1.xyxx  // r0.x <- uv.x; r0.y <- uv.y

#line 17
mul r0.z, r0.y, l(50.000000)
mul r0.w, cb2[0].x, l(10.000000)
add r0.z, r0.w, r0.z
sincos r0.z, null, r0.z
mul r1.x, r0.z, l(0.005000)  // r1.x <- offset

#line 18
itof r1.y, l(0)
add r0.zw, r0.xxxy, r1.xxxy
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.zwzz, t0.xyzw, s0  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z; r1.w <- color.w

#line 21
mul r0.z, r0.y, cb2[0].z
mul r0.z, r0.z, l(3.141500)
mul r0.z, r0.z, l(400.000000)
sincos r0.z, null, r0.z  // r0.z <- scanlineg

#line 22
mul r0.z, r0.z, l(0.100000)
add r0.z, r0.z, l(0.900000)
mul r1.xyz, r0.zzzz, r1.xyzx

#line 25
add r0.xy, r0.xyxx, cb2[0].xxxx
dp2 r0.x, r0.xyxx, l(12.989800, 78.233002, 0.000000, 0.000000)
sincos r0.x, null, r0.x
mul r0.x, r0.x, l(43758.546875)
frc r0.x, r0.x  // r0.x <- noise

#line 26
mov r0.y, l(-0.500000)
add r0.x, r0.y, r0.x
mul r0.x, r0.x, l(0.020000)
add r0.xyz, r0.xxxx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 29
mov o0.xyz, r0.xyzx
mov o0.w, r1.w
ret 
// Approximately 28 instruction slots used
